@page "{productID?}"
@model ExampleWebApp.Pages.Samples.ProductCRUDModel
@{
	ViewData["Title"] = "Product CRUD";
}

<h1>Product CRUD</h1>

@if (Model.HasFeedback)
{
	<p>@Model.Feedback</p>
}
@if(Model.HasError)
{
	<p>@Model.ErrorMessage</p>
}

<form method="post">
@* Setup the parts of the product *@

@*create a form control to hold the PK value
	This control should not be changable IF your PK is an IDENTITY
	this control CAN be visible (type="text") or hidden (type="hidden")
	visible or hidden depend on the design and business requirements.
*@
<label>
	Product ID:
	<input type="text" asp-for="ProductInfo.ProductID" readonly formnovalidate/>
</label>
<label>
	Product Name:
	<input type="text" asp-for="ProductInfo.ProductName" placeholder="product name" />
</label>
<label>
	Category:
	<select asp-for="ProductInfo.CategoryID">
		@foreach(var category in Model.CategoryList)
		{
			<option value="@category.CategoryID"
				selected=@(Model.ProductInfo != null && category.CategoryID == Model.ProductInfo.CategoryID)>
				@category.CategoryName
			</option>
		}
	</select>
</label>
<label>
    Supplier:
    <select asp-for="ProductInfo.SupplierID">
        @foreach(var item in Model.SupplierList)
        {
            <option value="@item.SupplierID" 
                selected=@(Model.ProductInfo != null && item.SupplierID == Model.ProductInfo.SupplierID)>
                @item.CompanyName
            </option>
        }
    </select>
</label>
<label>
	Unit Size:
	<input type="text" asp-for="ProductInfo.QuantityPerUnit" placeholder="unit size" />
</label>
<label>
	Min Order Qty:
	<input type="number" asp-for="ProductInfo.MinimumOrderQuantity" placeholder="minimum order qty"
		step="1" min="1" />
</label>
<label>
    Unit Price:
    <input type="number" asp-for="ProductInfo.UnitPrice" placeholder="unit price"
                step="0.01" min="0.00"/>
</label>
<label>
    Units on Order:
    <input type="text" asp-for="ProductInfo.UnitsOnOrder" placeholder="units on order"
        disabled="true"/>
</label>
@* for a bool we will use checkboxes, the default transfer of data for the checkbox is:
		not check = null
		check = on
	If using a checkbox for a boolean (true or false)
		set the attribute value="true" for the checkbox
*@
<label>
	Discontinued:
	<input type="checkbox" asp-for="ProductInfo.Discontinued" value="true" />
	&nbsp;&nbsp; (discontinued if checked)
</label>
<br /><br />
@* Manage the button to restrict user access
	Base this on if a Product was used to call the product.
*@
@if(Model.ProductInfo != null)
	{
		<button type="submit" asp-page-handler="New" disable>Save New</button>
		<button type="submit" asp-page-handler="Update">Update</button>
		<button type="submit" asp-page-handler="Delete"
			formnovalidate onclick="return confirm('Are you sure you wish to discontinue the product?')">
		Discontinue</button>
		<button type="submit" asp-page-handler="Clear" formnovalidate>Clear</button>
		<button type="submit" asp-page-handler="Search" formnovalidate>Search</button>
	}
	else
	{
		<button type="submit" asp-page-handler="New">Save New</button>
		<button type="submit" asp-page-handler="Update" disable>Update</button>
		<button type="submit" asp-page-handler="Delete" disable
			formnovalidate onclick="return confirm('Are you sure you wish to discontinue the product?')">
		Discontinue</button>
		<button type="submit" asp-page-handler="Clear" formnovalidate>Clear</button>
		<button type="submit" asp-page-handler="Search" formnovalidate>Search</button>
	}
</form>
